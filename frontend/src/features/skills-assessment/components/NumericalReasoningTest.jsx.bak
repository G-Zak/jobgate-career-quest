import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaChartLine, FaClock, FaStop, FaArrowRight, FaFlag, FaCalculator, FaQuestionCircle, FaTable, FaChartBar } from 'react-icons/fa';
import { useTranslation } from 'react-i18next';
import axios from 'axios';
import { APP_CONFIG } from '../../../config/constants';
import { useScrollToTop, useTestScrollToTop, useQuestionScrollToTop, scrollToTop } from '../../../shared/utils/scrollUtils';

// Define API base URL directly if APP_CONFIG is not available
const API_BASE_URL = APP_CONFIG?.API_BASE_URL || 'http://localhost:8000/api';

const NumericalReasoningTest = ({
  testData,
  questions,
  totalQuestionsCount,
  timeLimit,
  onSuccess,
  onError,
  onBackToDashboard,
  onTestComplete,
}) => {
  const { t = (key) => {
    // Simple translation function fallback if i18n is not available
    const translations = {
      'numericalReasoningTest': 'Numerical Reasoning Test',
      'assessNumericalSkills': 'Assess your numerical skills',
      'testInstructions': 'Test Instructions',
      'numericalTestDesc': 'This test measures your ability to make correct decisions based on numerical data.',
      'questions': 'questions',
      'toComplete': 'to complete',
      'minutes': 'minutes',
      'timeLimit': 'time limit',
      'useCalculationsCarefully': 'Use calculations carefully and pay attention to units and scales.',
      'oneAttemptOnly': 'You have one attempt only.',
      'backToDashboard': 'Back to Dashboard',
      'startTest': 'Start Test',
      'starting': 'Starting',
      'question': 'Question',
      'of': 'of',
      'endTest': 'End Test',
      'submitting': 'Submitting',
      'nextQuestion': 'Next Question',
      'finishTest': 'Finish Test',
      'testCompleted': 'Test Completed',
      'numericalReasoningResults': 'Numerical Reasoning Results',
      'overallScore': 'Overall Score',
      'excellent': 'Excellent',
      'good': 'Good',
      'needsImprovement': 'Needs Improvement',
      'correctAnswers': 'Correct Answers',
      'timeUsed': 'Time Used',
      'seconds': 'seconds',
      'accuracy': 'Accuracy',
      'viewDetailedResults': 'View Detailed Results',
      'errorStartingTest': 'Error starting test. Please try again.',
      'selectCorrectOption': 'Select your answer'
    };
    return translations[key] || key;
  }} = useTranslation();
  
  // Determine starting section based on testId (for Numerical there is only 1 section)
  const startingSection = 1;
  
  const [testStep, setTestStep] = useState('instructions'); // instructions, test, results
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [questionNumber, setQuestionNumber] = useState(0);
  const [totalQuestions, setTotalQuestions] = useState(totalQuestionsCount || 25);
  const [timeRemaining, setTimeRemaining] = useState(timeLimit || 15 * 60); // 15 minutes
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [answers, setAnswers] = useState({});
  const [sessionId, setSessionId] = useState(null);
  const [testResults, setTestResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  // Ref for test scroll container
  const testContainerRef = useRef(null);

  // Universal scroll management using scroll utilities
  useScrollToTop([], { smooth: true }); // Scroll on component mount
  useTestScrollToTop(testStep, testContainerRef, { smooth: true, attempts: 5 }); // Scroll on test step changes
  useQuestionScrollToTop(questionNumber, testStep, testContainerRef); // Scroll on question changes

  // Global timer effect for the entire test
  useEffect(() => {
    let timer;
    
    if (testStep === 'test' && timeRemaining > 0) {
      console.log(`Setting up global numerical timer, time: ${timeRemaining}`);
      timer = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 1) {
            console.log("Time's up! Ending test automatically.");
            handleFinishTest();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }

    // Clear interval when component unmounts or when test state changes
    return () => {
      if (timer) {
        console.log(`Clearing numerical timer`);
        clearInterval(timer);
      }
    };
  }, [testStep, timeRemaining]);

  // Log when current question changes but don't reset the timer
  useEffect(() => {
    if (currentQuestion) {
      console.log("Current question updated:", currentQuestion);
      console.log("Question ID:", currentQuestion.question_id);
    }
  }, [currentQuestion?.question_id]); // Only trigger when question_id changes

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const startTest = async () => {
    setIsLoading(true);
    try {
      console.log('Starting test with URL:', `${API_BASE_URL}/skills-tests/start/`);
      const response = await axios.post(`${API_BASE_URL}/skills-tests/start/`, {
        test_type: 'numerical_reasoning',
        user_id: 'guest-user',
        num_questions: 25 // Explicitly request all 25 questions
      });

      // Log the complete response data structure to understand the format
      console.log("Complete API response:", JSON.stringify(response.data, null, 2));

      setSessionId(response.data.session_id);
      setTotalQuestions(25); // Always set to 25 questions
      setTimeRemaining(15 * 60); // Set to 15 minutes (900 seconds) for the entire test

      // Set the first question from the response
      const questionData = response.data.test_info.question;
      console.log("First question data:", questionData);
      // Log specific question_content structure to debug
      console.log("Question content structure:", questionData.question_content);
      setCurrentQuestion(questionData);
      setQuestionNumber(response.data.test_info.current_question);
      setSelectedAnswer(null);
      setTestStep('test');
    } catch (error) {
      console.error('Error starting test:', error);
      // More detailed error information
      if (error.response) {
        console.error('Response data:', error.response.data);
        console.error('Response status:', error.response.status);
      } else if (error.request) {
        console.error('No response received, request:', error.request);
      } else {
        console.error('Error message:', error.message);
      }
      alert(t('errorStartingTest'));
    } finally {
      setIsLoading(false);
    }
  };

  const handleAnswerSelect = (answer) => {
    setSelectedAnswer(answer);
    setAnswers(prev => ({
      ...prev,
      [currentQuestion.question_id]: answer
    }));
  };

  const handleNextQuestion = async () => {
    if (!selectedAnswer || isLoading) return;

    setIsLoading(true);
    try {
      // For global timing, just record a standard time per question (since we don't track per-question time anymore)
      const timeTaken = 30; // Arbitrary time value for the question
      console.log(`Current numerical time remaining for entire test: ${timeRemaining}s`);
      
      // Make a direct API call instead of using an imported function
      const response = await axios.post(`${API_BASE_URL}/skills-tests/submit-answer/`, {
        session_id: sessionId,
        answer: selectedAnswer,
        time_taken: timeTaken
      });

      // Check if test is completed from the response
      if (response.data.result && response.data.result.test_completed) {
        // Test is completed, show results directly from the response
        if (response.data.result.final_results) {
          console.log('Test completed, final results:', response.data.result.final_results);
          setTestResults(response.data.result.final_results);
          setTestStep('results');
        } else {
          // Fallback: get results from API
          await getResults();
        }
      } else {
        // Load next question
        const nextQuestion = response.data.result.next_question;
        console.log("Next question data from submit:", nextQuestion);
        console.log("Next question content structure:", nextQuestion.question_content);
        
        // Log all possible question text fields to debug
        console.log("Question text fields:", {
          "question_content.question": nextQuestion.question_content?.question,
          "question_content.text": nextQuestion.question_content?.text,
          "question_text": nextQuestion.question_text,
          "text": nextQuestion.text
        });
        
        setCurrentQuestion(nextQuestion);
        setQuestionNumber(response.data.result.question_number + 1);
        setSelectedAnswer('');
        
        // No need to reset timer - global timer continues
        console.log(`Moving to next question with global time remaining: ${timeRemaining}s`);
      }
    } catch (error) {
      console.error('Error submitting answer:', error);
      // Don't retry if already in results state
      if (testStep === 'results') {
        return;
      }
      // Check if error is due to completed test
      if (error.response?.status === 400 || error.response?.status === 500) {
        console.log('Test might be completed, trying to get results...');
        await getResults();
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handlePreviousQuestion = () => {
    // Since the API doesn't support going back to previous questions in this test type,
    // we'll just show a message to the user
    alert(t('cannotGoBack'));
  };

  const getResults = async (currentSessionId = sessionId) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/skills-tests/results/${currentSessionId}/`);
      console.log("Test results response:", response.data);
      setTestResults(response.data);
      setTestStep('results');
    } catch (error) {
      console.error('Error getting results:', error);
      // If test is not completed yet, don't show error
      if (error.response?.status === 400) {
        console.log('Test not completed yet');
      } else {
        // Show actual errors
        alert('Error getting test results. Please try again.');
      }
    }
  };

  const handleFinishTest = async () => {
    // Call the endpoint to get results directly
    await getResults();
  };

  const handleAbortTest = () => {
    if (window.confirm("Are you sure you want to abort this test? Your progress will be lost.")) {
      onBackToDashboard();
    }
  };

  if (isLoading && !currentQuestion) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <FaChartLine className="text-6xl text-blue-600 animate-spin mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-800 mb-2">Loading Numerical Reasoning Test...</h2>
          <p className="text-gray-600">Preparing questions and data</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full">
      {/* Test Instructions */}
      {testStep === 'instructions' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center justify-center p-6"
        >
          <div className="bg-white rounded-xl shadow-lg p-8 max-w-4xl w-full border border-gray-200">
            <div className="text-center mb-8">
              <div className="bg-gradient-to-br from-blue-500 to-green-600 rounded-full p-4 w-20 h-20 mx-auto mb-4 flex items-center justify-center">
                <FaChartLine className="text-3xl text-white" />
              </div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent mb-3">
                Numerical Reasoning Test
              </h1>
              <p className="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
                Assess your ability to analyze numerical data, interpret charts and tables, and make data-based decisions
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-8 mb-8">
              <div className="bg-blue-50 rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2 text-blue-800">
                  <FaQuestionCircle className="text-blue-600" />
                  Test Instructions
                </h3>
                <ul className="space-y-3 text-gray-700">
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>You will be presented with <strong>25 numerical reasoning questions</strong> testing your mathematical skills</span>
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>Questions involve <strong>data interpretation, calculations, and problem-solving</strong> using tables, charts, and numerical information</span>
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>Choose the correct answer from the options provided for each question</span>
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>Use <strong>calculations carefully</strong> and pay attention to units and scales in data</span>
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>Click <strong>"Submit"</strong> to move to the next question or finish the test</span>
                  </li>
                </ul>
              </div>
              <div className="bg-gray-50 rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4 text-gray-800">Test Details</h3>
                <div className="space-y-4">
                  <div className="bg-white rounded-lg p-4 border border-gray-200">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-gray-600">Duration:</span>
                      <span className="font-bold text-lg text-blue-600">15 minutes</span>
                    </div>
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-gray-600">Total Questions:</span>
                      <span className="font-bold text-lg text-green-600">25</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">Question Types:</span>
                      <span className="font-medium text-gray-800">
                        Data Tables, Charts, Calculations
                      </span>
                    </div>
                  </div>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <FaCalculator className="text-yellow-600" />
                      <span className="font-semibold text-yellow-800">Calculation Tip</span>
                    </div>
                    <p className="text-yellow-700 text-sm">Feel free to use a calculator if needed, but practice efficient mental calculations to save time on simpler problems.</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex gap-4 justify-center pt-6 border-t border-gray-200">
              <button
                onClick={onBackToDashboard}
                className="px-8 py-3 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all flex items-center gap-2 font-medium"
              >
                Back to Dashboard
              </button>
              <button
                onClick={startTest}
                disabled={isLoading}
                className="px-8 py-3 bg-gradient-to-r from-blue-600 to-green-600 text-white rounded-lg hover:from-blue-700 hover:to-green-700 transition-all flex items-center gap-2 font-medium shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Starting...
                  </>
                ) : (
                  <>Begin Test <FaArrowRight /></>
                )}
              </button>
            </div>
          </div>
        </motion.div>
      )}

      {/* Test Questions */}
      {testStep === 'test' && currentQuestion && (
        <div 
          ref={testContainerRef}
          className="test-scroll-container relative h-[calc(100vh-7rem)] overflow-y-auto overflow-x-hidden"
          data-scroll-container="numerical-test"
          id="numerical-test-scroll"
        >
          {/* Sticky Header within local scroll container */}
          <div className="bg-white shadow-sm border-b border-gray-200 p-4 sticky top-0 z-50">
            <div className="max-w-6xl mx-auto flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <FaChartLine className="text-blue-600" />
                  <span className="font-medium text-gray-800">
                    Numerical Reasoning Test
                  </span>
                </div>
                <span className="text-gray-500">
                  Question {questionNumber} of {totalQuestions}
                </span>
              </div>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2 text-gray-600">
                  <FaClock className={timeRemaining < 60 ? 'text-red-600 animate-pulse' : 
                      timeRemaining < 180 ? 'text-orange-500' : ''} />
                  <span className={`font-mono ${
                    timeRemaining < 60 ? 'text-red-600 animate-pulse' :
                    timeRemaining < 180 ? 'text-orange-500' :
                    'text-gray-700'
                  }`}>{formatTime(timeRemaining)}</span>
                </div>
                <button
                  onClick={handleAbortTest}
                  className="px-4 py-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors flex items-center gap-2"
                >
                  <FaStop /> Abort
                </button>
              </div>
            </div>
          </div>

          {/* Question Content */}
          <div className="flex-1 p-6">
            <div className="max-w-6xl mx-auto">
              <motion.div
                key={currentQuestion.question_id}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                className="bg-white rounded-xl shadow-lg p-8"
              >
                {/* Question Header */}
                <div className="mb-8">
                  <div className="flex justify-between items-start mb-4">
                    <h2 className="text-2xl font-bold text-gray-900">
                      {currentQuestion.content?.question || "Question not available"}
                    </h2>
                    <div className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                      Numerical
                    </div>
                  </div>
                  
                  {/* Display additional context for chart/table questions with improved styling */}
                  {currentQuestion.content?.chart_data && (
                    <div className="mb-6 bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                      <div className="bg-blue-50 border-b border-blue-100 px-4 py-3">
                        <h3 className="text-blue-800 font-medium flex items-center">
                          <FaChartBar className="mr-2" />
                          {currentQuestion.content.chart_data.title}
                        </h3>
                      </div>
                      <div className="p-4">
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                          {Object.entries(currentQuestion.content.chart_data.data).map(([key, value]) => (
                            <div key={key} className="p-2 bg-gray-50 rounded">
                              <div className="text-xs text-gray-500">{key}</div>
                              <div className="font-medium text-gray-900">{value}</div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Display table data with improved styling */}
                  {currentQuestion.content?.table_data && (
                    <div className="mb-6 bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                      <div className="bg-purple-50 border-b border-purple-100 px-4 py-3">
                        <h3 className="text-purple-800 font-medium flex items-center">
                          <FaTable className="mr-2" />
                          {currentQuestion.content.table_data.title}
                        </h3>
                      </div>
                      <div className="p-4">
                        <div className="overflow-x-auto">
                          <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                              <tr>
                                {currentQuestion.content.table_data.data.length > 0 && 
                                 Object.keys(currentQuestion.content.table_data.data[0]).map(key => (
                                  <th key={key} className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    {key}
                                  </th>
                                ))}
                              </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                              {currentQuestion.content.table_data.data.map((row, index) => (
                                <tr key={index}>
                                  {Object.values(row).map((value, valueIndex) => (
                                    <td key={valueIndex} className="px-3 py-2 whitespace-nowrap text-sm text-gray-900">
                                      {value}
                                    </td>
                                  ))}
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Answer Options */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold mb-4 text-gray-800 flex items-center">
                    <FaQuestionCircle className="text-blue-600 mr-2" />
                    {t('selectCorrectOption')}
                  </h3>
                  <div className="space-y-3">
                    {currentQuestion.options.map((option, index) => (
                      <button
                        key={index}
                        onClick={() => handleAnswerSelect(option.option_id)}
                        className={`w-full text-left p-4 rounded-lg border-2 transition-all duration-200 ${
                          selectedAnswer === option.option_id
                            ? 'border-blue-500 bg-blue-50 shadow-md'
                            : 'border-gray-200 hover:border-blue-300 hover:bg-gray-50'
                        }`}
                      >
                        <div className="flex items-center">
                          <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-medium mr-3 ${
                            selectedAnswer === option.option_id
                              ? 'border-blue-500 bg-blue-500 text-white'
                              : 'border-gray-300 text-gray-500'
                          }`}>
                            {option.option_id}
                          </div>
                          <span className="text-gray-700">{option.content}</span>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Navigation */}
                <div className="flex justify-between items-center">
                  <button
                    onClick={handlePreviousQuestion}
                    disabled={true} // Disable previous button since API doesn't support going back
                    className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Previous
                  </button>
                  
                  <div className="text-sm text-gray-500">
                    {selectedAnswer ? '✓ Answered' : 'Not answered'}
                  </div>

                  {questionNumber === totalQuestions ? (
                    <button
                      onClick={handleNextQuestion}
                      disabled={!selectedAnswer || isLoading}
                      className={`px-6 py-3 ${
                        !selectedAnswer || isLoading
                          ? 'bg-gray-400 cursor-not-allowed text-white'
                          : 'bg-green-600 text-white hover:bg-green-700'
                      } rounded-lg transition-colors flex items-center gap-2`}
                    >
                      <FaFlag /> Finish Test
                    </button>
                  ) : (
                    <button
                      onClick={handleNextQuestion}
                      disabled={!selectedAnswer || isLoading}
                      className={`px-6 py-3 ${
                        !selectedAnswer || isLoading
                          ? 'bg-gray-400 cursor-not-allowed text-white'
                          : 'bg-blue-600 text-white hover:bg-blue-700'
                      } rounded-lg transition-colors`}
                    >
                      Next
                    </button>
                  )}
                </div>
              </motion.div>
            </div>
          </div>
        </div>
      )}

      {/* Test Results */}
      {testStep === 'results' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="min-h-screen flex items-center justify-center p-6"
        >
          <div className="bg-white rounded-xl shadow-lg p-8 max-w-2xl w-full text-center">
            <div className="text-green-500 text-6xl mb-4">✅</div>
            <h1 className="text-3xl font-bold text-gray-900 mb-4">Test Completed!</h1>
            <p className="text-gray-600 mb-6">
              You have successfully completed the Numerical Reasoning Assessment.
            </p>
            
            <div className="bg-gray-50 rounded-lg p-6 mb-6">
              <h3 className="text-lg font-semibold mb-4">Your Results</h3>
              
              {testResults && (
                <div>
                  {/* Score Display */}
                  <div className="mb-6">
                    <div className="relative">
                      <div className="flex justify-center">
                        <svg className="w-48 h-48" viewBox="0 0 100 100">
                          <circle 
                            cx="50" cy="50" r="45" 
                            fill="none" 
                            stroke="#e2e8f0" 
                            strokeWidth="10"
                          />
                          <circle 
                            cx="50" cy="50" r="45" 
                            fill="none" 
                            stroke={(() => {
                              const score = Math.round(((testResults.results?.raw_score || 0) / 25) * 100);
                              if (score >= 80) return '#3b82f6'; // blue for excellent
                              if (score >= 60) return '#10b981'; // green for good
                              return '#f97316'; // orange for needs improvement
                            })()}
                            strokeWidth="10"
                            strokeDasharray="283"
                            strokeDashoffset={283 - (283 * Math.round(((testResults.results?.raw_score || 0) / 25) * 100)) / 100}
                            strokeLinecap="round"
                            transform="rotate(-90 50 50)"
                            className="transition-all duration-1000 ease-out"
                          />
                        </svg>
                        <div className="absolute inset-0 flex flex-col items-center justify-center">
                          <div className="text-5xl font-bold text-gray-900">
                            {Math.round(((testResults.results?.raw_score || 0) / 25) * 100)}%
                          </div>
                          <div className={`text-sm font-medium mt-1 ${
                            Math.round(((testResults.results?.raw_score || 0) / 25) * 100) >= 80 ? 'text-blue-600' :
                            Math.round(((testResults.results?.raw_score || 0) / 25) * 100) >= 60 ? 'text-green-600' : 
                            'text-orange-600'
                          }`}>
                            {Math.round(((testResults.results?.raw_score || 0) / 25) * 100) >= 80 ? t('excellent') :
                             Math.round(((testResults.results?.raw_score || 0) / 25) * 100) >= 60 ? t('good') : t('needsImprovement')}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-3 gap-4 text-center">
                    <div>
                      <div className="text-xl font-bold text-blue-600">{testResults.results?.raw_score || 0} / 25</div>
                      <div className="text-sm text-gray-600">Correct Answers</div>
                    </div>
                    <div>
                      <div className="text-xl font-bold text-green-600">{formatTime(testResults.results?.time_taken || 0)}</div>
                      <div className="text-sm text-gray-600">Time Used</div>
                    </div>
                    <div>
                      <div className="text-xl font-bold text-purple-600">{Math.round(((testResults.results?.raw_score || 0) / 25) * 100)}%</div>
                      <div className="text-sm text-gray-600">Accuracy</div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="flex gap-4 justify-center">
              <button
                onClick={onBackToDashboard}
                className="px-6 py-3 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all"
              >
                Return to Dashboard
              </button>
              
              {onTestComplete && (
                <button
                  onClick={() => onTestComplete(testResults)}
                  className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  View Detailed Results
                </button>
              )}
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default NumericalReasoningTest;
