import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaBrain, FaClock, FaStop, FaArrowRight, FaFlag, FaEye, FaQuestionCircle } from 'react-icons/fa';
import { useTranslation } from 'react-i18next';
import axios from 'axios';
import { APP_CONFIG } from '../../../config/constants';
import { useScrollToTop, useTestScrollToTop, useQuestionScrollToTop, scrollToTop } from '../../../shared/utils/scrollUtils';

const AbstractReasoningTest = ({ onBackToDashboard, onTestComplete }) => {
  const { t } = useTranslation();
  
  // Determine starting section based on testId (for Abstract there is only 1 section)
  const startingSection = 1;
  
  const [testStep, setTestStep] = useState('instructions'); // instructions, section_intro, test, results
  const [currentSection, setCurrentSection] = useState(startingSection);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [questionNumber, setQuestionNumber] = useState(0);
  const [totalQuestions, setTotalQuestions] = useState(25);
  const [timeRemaining, setTimeRemaining] = useState(15 * 60); // 15 minutes
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [answers, setAnswers] = useState({});
  const [sessionId, setSessionId] = useState(null);
  const [testResults, setTestResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  // Ref for test scroll container
  const testContainerRef = useRef(null);

  // Universal scroll management using scroll utilities
  useScrollToTop([], { smooth: true }); // Scroll on component mount
  useTestScrollToTop(testStep, testContainerRef, { smooth: true, attempts: 5 }); // Scroll on test step changes
  useQuestionScrollToTop(questionNumber, testStep, testContainerRef); // Scroll on question changes

  // Global timer effect for the entire test
  useEffect(() => {
    let timer;
    
    if (testStep === 'test' && timeRemaining > 0) {
      console.log(`Setting up global abstract timer, time: ${timeRemaining}`);
      timer = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 1) {
            console.log("Time's up! Ending test automatically.");
            handleFinishTest();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }

    // Clear interval when component unmounts or when test state changes
    return () => {
      if (timer) {
        console.log(`Clearing abstract timer`);
        clearInterval(timer);
      }
    };
  }, [testStep, timeRemaining]);

  // Log when current question changes but don't reset the timer
  useEffect(() => {
    if (currentQuestion) {
      console.log("Current abstract question updated:", currentQuestion);
      console.log("Question ID:", currentQuestion.question_id);
      console.log("Question description:", currentQuestion.question_content?.description || "Not specified");
      console.log("Options structure:", JSON.stringify(currentQuestion.options?.[0] || {}, null, 2));
    }
  }, [currentQuestion?.question_id]); // Only trigger when question_id changes

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const startTest = async () => {
    setIsLoading(true);
    try {
      // Request all 25 questions in our test
      const response = await axios.post(`${APP_CONFIG.API_BASE_URL}/skills-tests/start/`, {
        test_type: 'abstract_reasoning',
        difficulty: 'intermediate',
        num_questions: 25 // Explicitly request all 25 questions using the correct parameter name
      });

      // Always set total questions to 25 regardless of API response
      setSessionId(response.data.session_id);
      setTotalQuestions(25); // Hardcode to 25 questions total
      setTimeRemaining(15 * 60); // Always set to 15 minutes (900 seconds) for the entire test

      // Set the first question from the response
      console.log("First abstract question data:", response.data.test_info.question);
      console.log("Abstract question ID:", response.data.test_info.question.question_id);
      
      setCurrentQuestion(response.data.test_info.question);
      setQuestionNumber(response.data.test_info.current_question);
      setSelectedAnswer(null);
      setTestStep('test');
    } catch (error) {
      console.error('Error starting test:', error);
      alert(t('errorStartingTest'));
    } finally {
      setIsLoading(false);
    }
  };

  const loadNextQuestion = async (currentSessionId = sessionId) => {
    try {
      const response = await axios.get(`${APP_CONFIG.API_BASE_URL}/skills-tests/question/${currentSessionId}/`);
      if (response.data.success && response.data.question) {
        console.log("Next abstract question data - ID:", response.data.question.question_id);
        setCurrentQuestion(response.data.question);
        setQuestionNumber(response.data.question_number);
        setSelectedAnswer(null);
        // Don't reset timer when loading next question (global timer continues)
      } else {
        await getResults(currentSessionId);
      }
    } catch (error) {
      console.error('Error loading question:', error);
    }
  };

  const handleAnswerSelect = (answer) => {
    setSelectedAnswer(answer);
    setAnswers(prev => ({
      ...prev,
      [currentQuestion.question_id]: answer
    }));
  };

  const handleNextQuestion = async () => {
    if (!selectedAnswer || isLoading) return;

    setIsLoading(true);
    try {
      // Get image number to determine correct answer
      let imageNumber = null;
      if (typeof currentQuestion.question_id === 'string' && currentQuestion.question_id.startsWith('ART_')) {
        imageNumber = parseInt(currentQuestion.question_id.replace('ART_', ''), 10) - 1;
      }

      // For global timing, just record a standard time per question (since we don't track per-question time anymore)
      const timeTaken = 30; // Arbitrary time value for the question
      console.log(`Current abstract time remaining for entire test: ${timeRemaining}s`);
      
      // Log the answer vs correct answer
      if (imageNumber !== null && imageNumber >= 0 && imageNumber < abstractCorrectAnswers.length) {
        console.log(`Question ${imageNumber+1}: User selected ${selectedAnswer}, Correct answer: ${abstractCorrectAnswers[imageNumber]}`);
      }
      
      const response = await axios.post(`${APP_CONFIG.API_BASE_URL}/skills-tests/submit-answer/`, {
        session_id: sessionId,
        answer: selectedAnswer,
        time_taken: timeTaken
      });

      // Check if test is completed from the response
      if (response.data.result && response.data.result.test_completed) {
        // Test is completed, show results directly from the response
        if (response.data.result.final_results) {
          console.log('Test completed, final results:', response.data.result.final_results);
          setTestResults(response.data.result.final_results);
          setTestStep('results');
        } else {
          // Fallback: get results from API
          await getResults();
        }
      } else {
        // Load next question
        const nextQuestion = response.data.result.next_question;
        console.log("Next abstract question data from submit:", nextQuestion);
        setCurrentQuestion(nextQuestion);
        setQuestionNumber(response.data.result.question_number + 1);
        setSelectedAnswer('');
        
        // No need to reset timer - global timer continues
        console.log(`Moving to next question with global time remaining: ${timeRemaining}s`);
      }
    } catch (error) {
      console.error('Error submitting answer:', error);
      // Don't retry if already in results state
      if (testStep === 'results') {
        return;
      }
      // Check if error is due to completed test
      if (error.response?.status === 400 || error.response?.status === 500) {
        console.log('Test might be completed, trying to get results...');
        await getResults();
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handlePreviousQuestion = () => {
    // Since the API doesn't support going back to previous questions in this test type,
    // we'll just show a message to the user
    alert(t('cannotGoBack'));
  };

  const getResults = async (currentSessionId = sessionId) => {
    try {
      const response = await axios.get(`${APP_CONFIG.API_BASE_URL}/skills-tests/results/${currentSessionId}/`);
      console.log("Test results response:", response.data);
      setTestResults(response.data);
      setTestStep('results');
    } catch (error) {
      console.error('Error getting results:', error);
      // If test is not completed yet, don't show error
      if (error.response?.status === 400) {
        console.log('Test not completed yet');
      } else {
        // Show actual errors
        alert('Error getting test results. Please try again.');
      }
    }
  };

  const handleFinishTest = async () => {
    // Call the endpoint to get results directly
    await getResults();
  };

  const handleAbortTest = () => {
    if (window.confirm("Are you sure you want to abort this test? Your progress will be lost.")) {
      onBackToDashboard();
    }
  };

  // Mapping of question descriptions based on question number (0-indexed)
  const abstractQuestionDescriptions = [
    "Which figure completes the series?", // 0.png
    "Which figure completes the series?", // 1.png
    "Which figure completes the series?", // 2.png
    "Which figure completes the series?", // 3.png
    "Which figure completes the series?", // 4.png
    "Which figure completes the statement?", // 5.png
    "Which figure completes the statement?", // 6.png
    "Which figure completes the statement?", // 7.png
    "Which figure completes the statement?", // 8.png
    "Which figure completes the statement?", // 9.png
    "Which figure is the odd one out?", // 10.png
    "Which figure is the odd one out?", // 11.png
    "Which figure is the odd one out?", // 12.png
    "Which figure is the odd one out?", // 13.png
    "Which figure is the odd one out?", // 14.png
    "Which figure completes the series?", // 15.png
    "Which figure completes the series?", // 16.png
    "Which figure belongs in neither group?", // 17.png
    "Which figure belongs in neither group?", // 18.png
    "Which figure is next in the series?", // 19.png
    "Which figure is next in the series?", // 20.png
    "Which figure completes the grid?", // 21.png
    "Which figure completes the grid?", // 22.png
    "Which figure is the odd one out?", // 23.png
    "Which figure is the odd one out?"  // 24.png
  ];
  
  // Correct answers for each question (0-indexed)
  const abstractCorrectAnswers = [
    "A", // 0.png
    "C", // 1.png
    "C", // 2.png
    "D", // 3.png
    "B", // 4.png
    "B", // 5.png
    "C", // 6.png
    "D", // 7.png
    "A", // 8.png
    "C", // 9.png
    "C", // 10.png
    "D", // 11.png
    "A", // 12.png
    "D", // 13.png
    "E", // 14.png
    "D", // 15.png
    "A", // 16.png
    "C", // 17.png
    "A", // 18.png
    "B", // 19.png
    "D", // 20.png
    "B", // 21.png
    "C", // 22.png
    "C", // 23.png
    "D"  // 24.png
  ];

  // Get question options count based on question type
  const getQuestionOptionsCount = (imageNumber) => {
    // Questions with 5 options (A, B, C, D, E) are "odd one out" type
    const fiveOptionQuestions = [10, 11, 12, 13, 14, 23, 24];
    return fiveOptionQuestions.includes(imageNumber) ? 5 : 4;
  };

  const renderAbstractImage = (questionId) => {
    // Extract the number from the question ID (e.g., "ART_001" -> "1")
    let imageNumber = null;
    
    if (typeof questionId === 'string' && questionId.startsWith('ART_')) {
      imageNumber = parseInt(questionId.replace('ART_', ''), 10) - 1;
    } else if (typeof questionId === 'number') {
      imageNumber = questionId;
    } else if (questionId && questionId.question_id) {
      // Handle the case when the full question object is passed
      imageNumber = parseInt(questionId.question_id.replace('ART_', ''), 10) - 1;
    }
    
    if (imageNumber === null || isNaN(imageNumber)) {
      console.error('Invalid question ID for image rendering:', questionId);
      return <div className="text-red-500">Invalid image reference</div>;
    }

    // Make sure the image number is within range (0-24)
    imageNumber = Math.min(Math.max(0, imageNumber), 24);
    
    // Construct the image path
    const imagePath = `/abstractTest_images/${imageNumber}.png`;
    
    console.log(`Rendering abstract image for question ${questionId}, path: ${imagePath}`);
    
    return (
      <div className="w-full flex items-center justify-center bg-gray-50 dark:bg-gray-700 rounded-lg border p-2">
        <img 
          src={imagePath} 
          alt={`Abstract reasoning pattern ${imageNumber}`}
          className="max-h-96 object-contain"
        />
      </div>
    );
  };

  if (isLoading && !currentQuestion) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <FaBrain className="text-6xl text-blue-600 animate-spin mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-800 mb-2">Loading Abstract Reasoning Test...</h2>
          <p className="text-gray-600">Preparing patterns and questions</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full">
      {/* Test Instructions */}
      {testStep === 'instructions' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center justify-center p-6"
        >
          <div className="bg-white rounded-xl shadow-lg p-8 max-w-4xl w-full border border-gray-200">
            <div className="text-center mb-8">
              <div className="bg-gradient-to-br from-blue-500 to-purple-600 rounded-full p-4 w-20 h-20 mx-auto mb-4 flex items-center justify-center">
                <FaBrain className="text-3xl text-white" />
              </div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-3">
                Abstract Reasoning Test
              </h1>
              <p className="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
                Assess your ability to identify patterns, solve problems and apply logical thinking
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-8 mb-8">
              <div className="bg-blue-50 rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2 text-blue-800">
                  <FaQuestionCircle className="text-blue-600" />
                  Test Instructions
                </h3>
                <ul className="space-y-3 text-gray-700">
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>You will be presented with <strong>25 abstract pattern questions</strong> testing your ability to recognize patterns</span>
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>Study each question pattern carefully and <strong>analyze the relationships</strong> before selecting your answer</span>
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>Choose from the available option letters (A, B, C, D, E) provided for each question</span>
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>Look for <strong>patterns, sequences, and rules</strong> in how shapes change across the patterns</span>
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="text-blue-600 font-bold">•</span>
                    <span>Click <strong>"Submit"</strong> to move to the next question or finish the test</span>
                  </li>
                </ul>
              </div>
              <div className="bg-gray-50 rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4 text-gray-800">Test Details</h3>
                <div className="space-y-4">
                  <div className="bg-white rounded-lg p-4 border border-gray-200">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-gray-600">Duration:</span>
                      <span className="font-bold text-lg text-blue-600">15 minutes</span>
                    </div>
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-gray-600">Total Questions:</span>
                      <span className="font-bold text-lg text-green-600">25</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">Question Types:</span>
                      <span className="font-medium text-gray-800">
                        Series, Odd One Out, Patterns
                      </span>
                    </div>
                  </div>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <FaClock className="text-yellow-600" />
                      <span className="font-semibold text-yellow-800">Time Management Tip</span>
                    </div>
                    <p className="text-yellow-700 text-sm">Aim for approximately 35 seconds per question to ensure you complete all 25 questions within the 15-minute time limit.</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex gap-4 justify-center pt-6 border-t border-gray-200">
              <button
                onClick={onBackToDashboard}
                className="px-8 py-3 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all flex items-center gap-2 font-medium"
              >
                Back to Dashboard
              </button>
              <button
                onClick={startTest}
                disabled={isLoading}
                className="px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all flex items-center gap-2 font-medium shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Starting...
                  </>
                ) : (
                  <>Begin Test <FaArrowRight /></>
                )}
              </button>
            </div>
          </div>
        </motion.div>
      )}

      {/* Test Questions */}
      {testStep === 'test' && currentQuestion && (
        <div 
          ref={testContainerRef}
          className="test-scroll-container relative h-[calc(100vh-7rem)] overflow-y-auto overflow-x-hidden"
          data-scroll-container="abstract-test"
          id="abstract-test-scroll"
        >
          {/* Sticky Header within local scroll container */}
          <div className="bg-white shadow-sm border-b border-gray-200 p-4 sticky top-0 z-50">
            <div className="max-w-6xl mx-auto flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <FaBrain className="text-blue-600" />
                  <span className="font-medium text-gray-800">
                    Abstract Reasoning Test
                  </span>
                </div>
                <span className="text-gray-500">
                  Question {questionNumber} of {totalQuestions}
                </span>
              </div>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2 text-gray-600">
                  <FaClock className={timeRemaining < 60 ? 'text-red-600 animate-pulse' : 
                      timeRemaining < 180 ? 'text-orange-500' : ''} />
                  <span className={`font-mono ${
                    timeRemaining < 60 ? 'text-red-600 animate-pulse' :
                    timeRemaining < 180 ? 'text-orange-500' :
                    'text-gray-700'
                  }`}>{formatTime(timeRemaining)}</span>
                </div>
                <button
                  onClick={handleAbortTest}
                  className="px-4 py-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors flex items-center gap-2"
                >
                  <FaStop /> Abort
                </button>
              </div>
            </div>
          </div>

          {/* Question Content */}
          <div className="flex-1 p-6">
            <div className="max-w-6xl mx-auto">
              <motion.div
                key={currentQuestion.question_id}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                className="bg-white rounded-xl shadow-lg p-8"
              >
                {/* Question Header */}
                <div className="mb-8">
                  {(() => {
                    let imageNumber = null;
                    if (typeof currentQuestion.question_id === 'string' && currentQuestion.question_id.startsWith('ART_')) {
                      imageNumber = parseInt(currentQuestion.question_id.replace('ART_', ''), 10) - 1;
                    }
                    
                    // Use custom question description based on image number
                    const questionDescription = imageNumber !== null && imageNumber >= 0 && imageNumber < abstractQuestionDescriptions.length 
                      ? abstractQuestionDescriptions[imageNumber] 
                      : currentQuestion.question_content?.description || 
                        currentQuestion.content?.question || 
                        currentQuestion.content?.text || 
                        currentQuestion.question_text || 
                        "Question not available";
                      
                    return (
                      <h2 className="text-2xl font-bold text-gray-900 mb-4">
                        {questionDescription}
                      </h2>
                    );
                  })()}
                </div>

                {/* Visual Content */}
                <div className="mb-8">
                  {/* Main Question Image */}
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold mb-4">Study the following pattern:</h3>
                    <div className="bg-gray-50 rounded-lg p-6 flex items-center justify-center">
                      {renderAbstractImage(currentQuestion.question_id)}
                    </div>
                  </div>

                  {/* Answer Options */}
                  <div>
                    {(() => {
                      // Extract image number to determine question type
                      let imageNumber = null;
                      if (typeof currentQuestion.question_id === 'string' && currentQuestion.question_id.startsWith('ART_')) {
                        imageNumber = parseInt(currentQuestion.question_id.replace('ART_', ''), 10) - 1;
                      }
                      
                      // Questions with 5 options need a different layout (A, B, C, D, E)
                      const hasFiveOptions = imageNumber !== null && getQuestionOptionsCount(imageNumber) === 5;
                      
                      // Generate option IDs based on whether this is a 4 or 5 option question
                      const optionLetters = hasFiveOptions ? ['A', 'B', 'C', 'D', 'E'] : ['A', 'B', 'C', 'D'];
                      
                      return (
                        <div>
                          <h3 className="text-lg font-semibold mb-4">Select your answer:</h3>
                          <div className="flex justify-center gap-4">
                            {optionLetters.map((letter) => {
                              const isSelected = selectedAnswer === letter;
                              
                              return (
                                <button
                                  key={letter}
                                  onClick={() => handleAnswerSelect(letter)}
                                  className={`w-16 h-16 rounded-lg border-2 font-bold text-xl transition-all ${
                                    isSelected 
                                      ? 'border-blue-500 bg-blue-500 text-white' 
                                      : 'border-gray-300 bg-white text-gray-700 hover:border-blue-300 hover:bg-blue-50'
                                  }`}
                                >
                                  {letter}
                                </button>
                              );
                            })}
                          </div>
                          <p className="text-sm text-gray-500 text-center mt-4">
                            Click the letter that corresponds to the correct answer
                          </p>
                        </div>
                      );
                    })()}
                  </div>
                </div>

                {/* Navigation */}
                <div className="flex justify-between items-center">
                  <button
                    onClick={handlePreviousQuestion}
                    disabled={true} // Disable previous button since API doesn't support going back
                    className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Previous
                  </button>
                  
                  <div className="text-sm text-gray-500">
                    {selectedAnswer ? '✓ Answered' : 'Not answered'}
                  </div>

                  {questionNumber === totalQuestions ? (
                    <button
                      onClick={handleNextQuestion}
                      disabled={!selectedAnswer || isLoading}
                      className={`px-6 py-3 ${
                        !selectedAnswer || isLoading
                          ? 'bg-gray-400 cursor-not-allowed text-white'
                          : 'bg-green-600 text-white hover:bg-green-700'
                      } rounded-lg transition-colors flex items-center gap-2`}
                    >
                      <FaFlag /> Finish Test
                    </button>
                  ) : (
                    <button
                      onClick={handleNextQuestion}
                      disabled={!selectedAnswer || isLoading}
                      className={`px-6 py-3 ${
                        !selectedAnswer || isLoading
                          ? 'bg-gray-400 cursor-not-allowed text-white'
                          : 'bg-blue-600 text-white hover:bg-blue-700'
                      } rounded-lg transition-colors`}
                    >
                      Next
                    </button>
                  )}
                </div>
              </motion.div>
            </div>
          </div>
        </div>
      )}

      {/* Test Results */}
      {testStep === 'results' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="min-h-screen flex items-center justify-center p-6"
        >
          <div className="bg-white rounded-xl shadow-lg p-8 max-w-2xl w-full text-center">
            <div className="text-green-500 text-6xl mb-4">✅</div>
            <h1 className="text-3xl font-bold text-gray-900 mb-4">Test Completed!</h1>
            <p className="text-gray-600 mb-6">
              You have successfully completed the Abstract Reasoning Assessment.
            </p>
            
            <div className="bg-gray-50 rounded-lg p-6 mb-6">
              <h3 className="text-lg font-semibold mb-4">Your Results</h3>
              
              {testResults && (
                <div>
                  {/* Score Display */}
                  <div className="mb-6">
                    <div className="relative">
                      <div className="flex justify-center">
                        <svg className="w-48 h-48" viewBox="0 0 100 100">
                          <circle 
                            cx="50" cy="50" r="45" 
                            fill="none" 
                            stroke="#e2e8f0" 
                            strokeWidth="10"
                          />
                          <circle 
                            cx="50" cy="50" r="45" 
                            fill="none" 
                            stroke={(() => {
                              const score = Math.round(((testResults.results?.raw_score || 0) / 25) * 100);
                              if (score >= 80) return '#3b82f6'; // blue for excellent
                              if (score >= 60) return '#10b981'; // green for good
                              return '#f97316'; // orange for needs improvement
                            })()}
                            strokeWidth="10"
                            strokeDasharray="283"
                            strokeDashoffset={283 - (283 * Math.round(((testResults.results?.raw_score || 0) / 25) * 100)) / 100}
                            strokeLinecap="round"
                            transform="rotate(-90 50 50)"
                            className="transition-all duration-1000 ease-out"
                          />
                        </svg>
                        <div className="absolute inset-0 flex flex-col items-center justify-center">
                          <div className="text-5xl font-bold text-gray-900">
                            {Math.round(((testResults.results?.raw_score || 0) / 25) * 100)}%
                          </div>
                          <div className={`text-sm font-medium mt-1 ${
                            Math.round(((testResults.results?.raw_score || 0) / 25) * 100) >= 80 ? 'text-blue-600' :
                            Math.round(((testResults.results?.raw_score || 0) / 25) * 100) >= 60 ? 'text-green-600' : 
                            'text-orange-600'
                          }`}>
                            {Math.round(((testResults.results?.raw_score || 0) / 25) * 100) >= 80 ? t('excellent') :
                             Math.round(((testResults.results?.raw_score || 0) / 25) * 100) >= 60 ? t('good') : t('needsImprovement')}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-3 gap-4 text-center">
                    <div>
                      <div className="text-xl font-bold text-blue-600">{testResults.results?.raw_score || 0} / 25</div>
                      <div className="text-sm text-gray-600">Correct Answers</div>
                    </div>
                    <div>
                      <div className="text-xl font-bold text-green-600">{formatTime(testResults.results?.time_taken || 0)}</div>
                      <div className="text-sm text-gray-600">Time Used</div>
                    </div>
                    <div>
                      <div className="text-xl font-bold text-purple-600">{Math.round(((testResults.results?.raw_score || 0) / 25) * 100)}%</div>
                      <div className="text-sm text-gray-600">Pattern Recognition</div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="flex gap-4 justify-center">
              <button
                onClick={onBackToDashboard}
                className="px-6 py-3 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all"
              >
                Return to Dashboard
              </button>
              
              {onTestComplete && (
                <button
                  onClick={() => onTestComplete(testResults)}
                  className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  View Detailed Results
                </button>
              )}
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default AbstractReasoningTest;
