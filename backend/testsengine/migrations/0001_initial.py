# Generated by Django 4.2.24 on 2025-09-26 11:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_answer', models.CharField(help_text="User's selected answer (A, B, C, D, etc.)", max_length=10)),
                ('is_correct', models.BooleanField(help_text='Whether the answer is correct')),
                ('time_taken_seconds', models.PositiveIntegerField(default=0, help_text='Time taken to answer this specific question')),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('points_awarded', models.DecimalField(decimal_places=2, default=0.0, help_text='Points awarded based on difficulty coefficient', max_digits=5)),
            ],
            options={
                'ordering': ['question__order'],
            },
        ),
        migrations.CreateModel(
            name='CodingChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('category', models.CharField(choices=[('algorithms', 'Algorithms'), ('data_structures', 'Data Structures'), ('string_manipulation', 'String Manipulation'), ('mathematics', 'Mathematics'), ('dynamic_programming', 'Dynamic Programming'), ('recursion', 'Recursion'), ('sorting_searching', 'Sorting & Searching'), ('graph_theory', 'Graph Theory'), ('web_development', 'Web Development'), ('database', 'Database')], max_length=30)),
                ('language', models.CharField(choices=[('python', 'Python'), ('javascript', 'JavaScript'), ('java', 'Java'), ('cpp', 'C++'), ('csharp', 'C#'), ('go', 'Go'), ('rust', 'Rust')], max_length=20)),
                ('problem_statement', models.TextField()),
                ('input_format', models.TextField(blank=True, null=True)),
                ('output_format', models.TextField(blank=True, null=True)),
                ('constraints', models.TextField(blank=True, null=True)),
                ('starter_code', models.TextField(blank=True, null=True)),
                ('solution_code', models.TextField(blank=True, null=True)),
                ('test_cases', models.JSONField(default=list)),
                ('max_points', models.IntegerField(default=100)),
                ('time_limit_seconds', models.IntegerField(default=2)),
                ('memory_limit_mb', models.IntegerField(default=128)),
                ('tags', models.JSONField(default=list)),
                ('estimated_time_minutes', models.IntegerField(default=30)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['difficulty', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CodingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='active', max_length=20)),
                ('current_code', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='CodingSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('accepted', 'Accepted'), ('wrong_answer', 'Wrong Answer'), ('compilation_error', 'Compilation Error'), ('runtime_error', 'Runtime Error'), ('time_limit_exceeded', 'Time Limit Exceeded'), ('memory_limit_exceeded', 'Memory Limit Exceeded')], default='pending', max_length=30)),
                ('score', models.IntegerField(default=0)),
                ('tests_passed', models.IntegerField(default=0)),
                ('total_tests', models.IntegerField(default=0)),
                ('execution_time_ms', models.IntegerField(default=0)),
                ('memory_used_mb', models.FloatField(default=0.0)),
                ('test_results', models.JSONField(default=list)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('compilation_output', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('reading_comprehension', 'Reading Comprehension'), ('vocabulary', 'Vocabulary in Context'), ('logical_deduction', 'Logical Deduction from Text'), ('critical_reasoning', 'Critical Reasoning'), ('analogies', 'Analogies and Relationships'), ('mental_rotation', 'Mental Rotation'), ('paper_folding', 'Paper Folding/Unfolding'), ('cross_sections', 'Cross-sections Identification'), ('spatial_transformation', 'Spatial Transformation'), ('perspective_changes', 'Perspective Changes'), ('multiple_choice', 'Multiple Choice'), ('situational_judgment', 'Situational Judgment')], db_index=True, max_length=50)),
                ('question_text', models.TextField()),
                ('passage', models.TextField(blank=True, null=True)),
                ('context', models.TextField(blank=True, null=True)),
                ('options', models.JSONField(help_text='Store options as JSON array')),
                ('correct_answer', models.CharField(db_index=True, help_text='Correct answer (A, B, C, D, etc.)', max_length=10)),
                ('explanation', models.TextField(blank=True, null=True)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy (Coefficient: 1.0)'), ('medium', 'Medium (Coefficient: 1.5)'), ('hard', 'Hard (Coefficient: 2.0)')], db_index=True, default='medium', help_text='Determines scoring coefficient: Easy=1.0, Medium=1.5, Hard=2.0', max_length=20)),
                ('order', models.PositiveIntegerField(help_text='Order of question within the test')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('main_image', models.URLField(blank=True, null=True)),
                ('option_images', models.JSONField(blank=True, default=list)),
                ('sequence_images', models.JSONField(blank=True, default=list)),
                ('base_image_id', models.CharField(blank=True, max_length=100, null=True)),
                ('overlay_ids', models.JSONField(blank=True, default=list)),
                ('transforms', models.JSONField(blank=True, default=dict)),
                ('option_remap', models.JSONField(blank=True, default=dict)),
                ('visual_style', models.CharField(blank=True, choices=[('technical_3d', 'Technical 3D Render'), ('diagram', 'Technical Diagram'), ('wireframe', 'Wireframe'), ('isometric', 'Isometric View'), ('orthographic', 'Orthographic Projection')], default='technical_3d', max_length=50)),
                ('complexity_score', models.PositiveIntegerField(default=1, help_text='1-5 visual complexity rating')),
            ],
            options={
                'ordering': ['test', 'order'],
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_text', models.TextField()),
                ('score_value', models.IntegerField(help_text='Score: +2 (Best), +1 (Acceptable), 0 (Unacceptable), -1 (Must Not Choose)')),
                ('option_letter', models.CharField(help_text='A, B, C, D', max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Question Option',
                'verbose_name_plural': 'Question Options',
                'db_table': 'testsengine_questionoption',
                'ordering': ['question', 'option_letter'],
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_score', models.DecimalField(decimal_places=2, help_text='Total points earned using difficulty coefficients', max_digits=8)),
                ('max_possible_score', models.DecimalField(decimal_places=2, help_text='Maximum possible points for this test', max_digits=8)),
                ('percentage_score', models.DecimalField(decimal_places=2, help_text='Percentage score (0-100)', max_digits=5)),
                ('correct_answers', models.PositiveIntegerField(help_text='Number of correct answers')),
                ('total_questions', models.PositiveIntegerField(help_text='Total number of questions')),
                ('easy_correct', models.PositiveIntegerField(default=0)),
                ('medium_correct', models.PositiveIntegerField(default=0)),
                ('hard_correct', models.PositiveIntegerField(default=0)),
                ('easy_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Score from easy questions (coefficient 1.0)', max_digits=6)),
                ('medium_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Score from medium questions (coefficient 1.5)', max_digits=6)),
                ('hard_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Score from hard questions (coefficient 2.0)', max_digits=6)),
                ('average_time_per_question', models.DecimalField(decimal_places=2, help_text='Average time per question in seconds', max_digits=6)),
                ('fastest_question_time', models.PositiveIntegerField(help_text='Fastest question time in seconds')),
                ('slowest_question_time', models.PositiveIntegerField(help_text='Slowest question time in seconds')),
                ('scoring_algorithm', models.CharField(default='difficulty_weighted', help_text='Algorithm used for scoring', max_length=50)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional scoring data and metrics')),
            ],
            options={
                'ordering': ['-calculated_at'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=200)),
                ('test_type', models.CharField(choices=[('verbal_reasoning', 'Verbal Reasoning'), ('numerical_reasoning', 'Numerical Reasoning'), ('logical_reasoning', 'Logical Reasoning'), ('abstract_reasoning', 'Abstract Reasoning'), ('spatial_reasoning', 'Spatial Reasoning'), ('situational_judgment', 'Situational Judgment'), ('technical', 'Technical')], db_index=True, max_length=50)),
                ('description', models.TextField()),
                ('duration_minutes', models.PositiveIntegerField(default=20, help_text='Fixed duration in minutes (20 minutes for all tests)')),
                ('total_questions', models.PositiveIntegerField(help_text='Total number of questions in this test')),
                ('passing_score', models.PositiveIntegerField(default=70, help_text='Minimum percentage score to pass')),
                ('max_possible_score', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum possible score using difficulty coefficients', max_digits=8, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('version', models.CharField(default='1.0', help_text='Test version for tracking changes', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['test_type', 'title'],
            },
        ),
        migrations.CreateModel(
            name='TestSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_seconds', models.PositiveIntegerField(help_text='Total time taken to complete the test')),
                ('is_complete', models.BooleanField(default=True, help_text='Whether all questions were answered')),
                ('answers_data', models.JSONField(default=dict, help_text='Raw answers from frontend for backup/debugging')),
                ('scored_at', models.DateTimeField(blank=True, help_text='When the submission was scored', null=True)),
                ('scoring_version', models.CharField(default='1.0', help_text='Version of scoring algorithm used', max_length=10)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='testsengine.test')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='TestSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='not_started', max_length=20)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('current_question', models.IntegerField(default=1)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('answers', models.JSONField(default=dict)),
                ('time_spent', models.IntegerField(default=0)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testsengine.test')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_id', models.CharField(db_index=True, max_length=64)),
                ('test_version', models.CharField(blank=True, max_length=32, null=True)),
                ('language', models.CharField(default='en', max_length=8)),
                ('total_questions', models.PositiveIntegerField()),
                ('correct', models.PositiveIntegerField()),
                ('percentage', models.PositiveIntegerField()),
                ('raw_score', models.FloatField(default=0.0)),
                ('started_at', models.DateTimeField()),
                ('finished_at', models.DateTimeField()),
                ('duration_seconds', models.PositiveIntegerField()),
                ('result', models.CharField(choices=[('completed', 'completed'), ('aborted', 'aborted'), ('timeout', 'timeout')], default='completed', max_length=16)),
                ('result_label', models.CharField(blank=True, max_length=32, null=True)),
                ('payload', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TestAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_answer', models.CharField(max_length=10)),
                ('is_correct', models.BooleanField()),
                ('time_taken', models.IntegerField(default=0)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testsengine.question')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_answers', to='testsengine.testsession')),
            ],
            options={
                'ordering': ['question__order'],
            },
        ),
        migrations.AddIndex(
            model_name='test',
            index=models.Index(fields=['test_type', 'is_active'], name='testsengine_test_ty_8cd7c7_idx'),
        ),
        migrations.AddIndex(
            model_name='test',
            index=models.Index(fields=['is_active', 'created_at'], name='testsengine_is_acti_cac403_idx'),
        ),
        migrations.AddConstraint(
            model_name='test',
            constraint=models.CheckConstraint(check=models.Q(('total_questions__gt', 0)), name='positive_total_questions'),
        ),
        migrations.AddConstraint(
            model_name='test',
            constraint=models.CheckConstraint(check=models.Q(('duration_minutes__gt', 0)), name='positive_duration'),
        ),
        migrations.AddConstraint(
            model_name='test',
            constraint=models.CheckConstraint(check=models.Q(('passing_score__gte', 0), ('passing_score__lte', 100)), name='valid_passing_score'),
        ),
        migrations.AddField(
            model_name='score',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='score', to='testsengine.testsubmission'),
        ),
        migrations.AddField(
            model_name='questionoption',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_options', to='testsengine.question'),
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='testsengine.test'),
        ),
        migrations.AddField(
            model_name='codingsubmission',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testsengine.codingchallenge'),
        ),
        migrations.AddField(
            model_name='codingsubmission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='codingsession',
            name='best_submission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='best_for_session', to='testsengine.codingsubmission'),
        ),
        migrations.AddField(
            model_name='codingsession',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testsengine.codingchallenge'),
        ),
        migrations.AddField(
            model_name='codingsession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='testsengine.question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='testsengine.testsubmission'),
        ),
        migrations.AddIndex(
            model_name='testsubmission',
            index=models.Index(fields=['user', 'test'], name='testsengine_user_id_b8214b_idx'),
        ),
        migrations.AddIndex(
            model_name='testsubmission',
            index=models.Index(fields=['submitted_at'], name='testsengine_submitt_18eba9_idx'),
        ),
        migrations.AddIndex(
            model_name='testsubmission',
            index=models.Index(fields=['test', 'submitted_at'], name='testsengine_test_id_4d9b3c_idx'),
        ),
        migrations.AddConstraint(
            model_name='testsubmission',
            constraint=models.UniqueConstraint(fields=('user', 'test'), name='unique_user_test_submission'),
        ),
        migrations.AlterUniqueTogether(
            name='testsession',
            unique_together={('user', 'test')},
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['user', 'test_id', 'created_at'], name='testsengine_user_id_5dc22b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testanswer',
            unique_together={('session', 'question')},
        ),
        migrations.AddIndex(
            model_name='score',
            index=models.Index(fields=['submission', 'percentage_score'], name='testsengine_submiss_21152d_idx'),
        ),
        migrations.AddIndex(
            model_name='score',
            index=models.Index(fields=['calculated_at'], name='testsengine_calcula_c59061_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['test', 'order'], name='testsengine_test_id_2bd618_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['test', 'difficulty_level'], name='testsengine_test_id_846e7c_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['question_type', 'difficulty_level'], name='testsengine_questio_58944f_idx'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('test', 'order'), name='unique_test_question_order'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.CheckConstraint(check=models.Q(('order__gt', 0)), name='positive_question_order'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.CheckConstraint(check=models.Q(('complexity_score__gte', 1), ('complexity_score__lte', 5)), name='valid_complexity_score'),
        ),
        migrations.AlterUniqueTogether(
            name='codingsession',
            unique_together={('user', 'challenge')},
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['submission', 'is_correct'], name='testsengine_submiss_ead3a7_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['question', 'is_correct'], name='testsengine_questio_d45953_idx'),
        ),
        migrations.AddConstraint(
            model_name='answer',
            constraint=models.UniqueConstraint(fields=('submission', 'question'), name='unique_submission_question_answer'),
        ),
    ]
