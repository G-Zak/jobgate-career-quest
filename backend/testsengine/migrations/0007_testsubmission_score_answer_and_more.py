# Generated by Django 4.2.24 on 2025-09-18 23:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("testsengine", "0006_alter_codingsubmission_user_testattempt"),
    ]

    operations = [
        migrations.CreateModel(
            name="TestSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("time_taken_seconds", models.IntegerField(default=0)),
                ("is_complete", models.BooleanField(default=True)),
                (
                    "answers_data",
                    models.JSONField(
                        default=dict, help_text="Raw answers from frontend"
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submission",
                        to="testsengine.testsession",
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="testsengine.test",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-submitted_at"],
            },
        ),
        migrations.CreateModel(
            name="Score",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "raw_score",
                    models.FloatField(default=0.0, help_text="Total points earned"),
                ),
                (
                    "max_possible_score",
                    models.FloatField(default=0.0, help_text="Maximum possible points"),
                ),
                (
                    "percentage_score",
                    models.FloatField(
                        default=0.0, help_text="Percentage score (0-100)"
                    ),
                ),
                ("correct_answers", models.IntegerField(default=0)),
                ("total_questions", models.IntegerField(default=0)),
                ("easy_correct", models.IntegerField(default=0)),
                ("medium_correct", models.IntegerField(default=0)),
                ("hard_correct", models.IntegerField(default=0)),
                (
                    "easy_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Score from easy questions (coefficient 1.0)",
                    ),
                ),
                (
                    "medium_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Score from medium questions (coefficient 1.5)",
                    ),
                ),
                (
                    "hard_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Score from hard questions (coefficient 2.0)",
                    ),
                ),
                (
                    "average_time_per_question",
                    models.FloatField(
                        default=0.0, help_text="Average time per question in seconds"
                    ),
                ),
                (
                    "fastest_question_time",
                    models.IntegerField(
                        default=0, help_text="Fastest question time in seconds"
                    ),
                ),
                (
                    "slowest_question_time",
                    models.IntegerField(
                        default=0, help_text="Slowest question time in seconds"
                    ),
                ),
                (
                    "scoring_algorithm",
                    models.CharField(default="difficulty_weighted", max_length=50),
                ),
                ("scoring_version", models.CharField(default="1.0", max_length=10)),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional scoring data and metrics"
                    ),
                ),
                (
                    "submission",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="score",
                        to="testsengine.testsubmission",
                    ),
                ),
            ],
            options={
                "ordering": ["-calculated_at"],
            },
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "selected_answer",
                    models.CharField(
                        help_text="User's selected answer (A, B, C, D, etc.)",
                        max_length=10,
                    ),
                ),
                ("is_correct", models.BooleanField(default=False)),
                (
                    "time_taken_seconds",
                    models.IntegerField(
                        default=0, help_text="Time taken to answer this question"
                    ),
                ),
                ("answered_at", models.DateTimeField(auto_now_add=True)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="testsengine.question",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="testsengine.testsubmission",
                    ),
                ),
            ],
            options={
                "ordering": ["question__order"],
            },
        ),
        migrations.AddIndex(
            model_name="testsubmission",
            index=models.Index(
                fields=["user", "test"], name="testsengine_user_id_b8214b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testsubmission",
            index=models.Index(
                fields=["submitted_at"], name="testsengine_submitt_18eba9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="score",
            index=models.Index(
                fields=["submission", "percentage_score"],
                name="testsengine_submiss_21152d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="score",
            index=models.Index(
                fields=["calculated_at"], name="testsengine_calcula_c59061_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="answer",
            index=models.Index(
                fields=["submission", "is_correct"],
                name="testsengine_submiss_ead3a7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="answer",
            index=models.Index(
                fields=["question", "is_correct"], name="testsengine_questio_d45953_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="answer",
            unique_together={("submission", "question")},
        ),
    ]
