# Generated by Django 5.0.6

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('testsengine', '0008_update_scoring_models'),
    ]

    operations = [
        # Add composite indexes for common query patterns
        
        # TestSubmission optimizations
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_testsubmission_user_submitted ON testsengine_testsubmission (user_id, submitted_at DESC);",
            reverse_sql="DROP INDEX IF EXISTS idx_testsubmission_user_submitted;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_testsubmission_test_submitted ON testsengine_testsubmission (test_id, submitted_at DESC);",
            reverse_sql="DROP INDEX IF EXISTS idx_testsubmission_test_submitted;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_testsubmission_user_test_submitted ON testsengine_testsubmission (user_id, test_id, submitted_at DESC);",
            reverse_sql="DROP INDEX IF EXISTS idx_testsubmission_user_test_submitted;"
        ),
        
        # Answer optimizations
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_answer_submission_correct ON testsengine_answer (submission_id, is_correct, points_awarded);",
            reverse_sql="DROP INDEX IF EXISTS idx_answer_submission_correct;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_answer_question_correct ON testsengine_answer (question_id, is_correct, points_awarded);",
            reverse_sql="DROP INDEX IF EXISTS idx_answer_question_correct;"
        ),
        
        # Question optimizations
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_question_test_difficulty ON testsengine_question (test_id, difficulty_level, scoring_coefficient);",
            reverse_sql="DROP INDEX IF EXISTS idx_question_test_difficulty;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_question_test_type_difficulty ON testsengine_question (test_id, question_type, difficulty_level);",
            reverse_sql="DROP INDEX IF EXISTS idx_question_test_type_difficulty;"
        ),
        
        # Score optimizations
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_score_percentage_grade ON testsengine_score (percentage_score DESC, grade_letter, passed);",
            reverse_sql="DROP INDEX IF EXISTS idx_score_percentage_grade;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_score_calculated_at ON testsengine_score (calculated_at DESC);",
            reverse_sql="DROP INDEX IF EXISTS idx_score_calculated_at;"
        ),
        
        # Test optimizations
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_test_type_active_created ON testsengine_test (test_type, is_active, created_at DESC);",
            reverse_sql="DROP INDEX IF EXISTS idx_test_type_active_created;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_test_active_duration ON testsengine_test (is_active, duration_minutes, total_questions);",
            reverse_sql="DROP INDEX IF EXISTS idx_test_active_duration;"
        ),
        
        # Partial indexes for common filters
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_testsubmission_active ON testsengine_testsubmission (user_id, test_id) WHERE is_complete = true;",
            reverse_sql="DROP INDEX IF EXISTS idx_testsubmission_active;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_answer_correct_only ON testsengine_answer (submission_id, question_id) WHERE is_correct = true;",
            reverse_sql="DROP INDEX IF EXISTS idx_answer_correct_only;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_question_active ON testsengine_question (test_id, \"order\") WHERE test_id IN (SELECT id FROM testsengine_test WHERE is_active = true);",
            reverse_sql="DROP INDEX IF EXISTS idx_question_active;"
        ),
        
        # Text search indexes
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_question_text_search ON testsengine_question USING gin(to_tsvector('english', question_text));",
            reverse_sql="DROP INDEX IF EXISTS idx_question_text_search;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_test_title_search ON testsengine_test USING gin(to_tsvector('english', title));",
            reverse_sql="DROP INDEX IF EXISTS idx_test_title_search;"
        ),
        
        # Statistics and analytics indexes
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_score_analytics ON testsengine_score (raw_score, max_possible_score, percentage_score, calculated_at);",
            reverse_sql="DROP INDEX IF EXISTS idx_score_analytics;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submission_analytics ON testsengine_testsubmission (submitted_at, time_taken_seconds, is_complete);",
            reverse_sql="DROP INDEX IF EXISTS idx_submission_analytics;"
        ),
        
        # Foreign key optimization indexes
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_answer_submission_question ON testsengine_answer (submission_id, question_id, answered_at);",
            reverse_sql="DROP INDEX IF EXISTS idx_answer_submission_question;"
        ),
        
        # Performance monitoring indexes
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_testsubmission_performance ON testsengine_testsubmission (time_taken_seconds, submitted_at) WHERE is_complete = true;",
            reverse_sql="DROP INDEX IF EXISTS idx_testsubmission_performance;"
        ),
    ]
