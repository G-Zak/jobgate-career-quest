# Generated by Django 4.2.24 on 2025-09-26 11:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('skills', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='JobOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('job_type', models.CharField(choices=[('full-time', 'Full Time'), ('part-time', 'Part Time'), ('contract', 'Contract'), ('internship', 'Internship'), ('freelance', 'Freelance')], default='full-time', max_length=20)),
                ('seniority', models.CharField(blank=True, choices=[('junior', 'Junior'), ('intermediate', 'Intermediate'), ('senior', 'Senior'), ('lead', 'Lead'), ('principal', 'Principal'), ('expert', 'Expert')], max_length=20)),
                ('salary_min', models.IntegerField(blank=True, null=True)),
                ('salary_max', models.IntegerField(blank=True, null=True)),
                ('remote', models.BooleanField(default=False)),
                ('description', models.TextField()),
                ('requirements', models.TextField(blank=True)),
                ('benefits', models.TextField(blank=True)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('company_size', models.CharField(blank=True, max_length=50)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('closed', 'Closed')], default='active', max_length=20)),
                ('posted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_skills', models.ManyToManyField(blank=True, related_name='preferred_jobs', to='skills.skill')),
                ('required_skills', models.ManyToManyField(blank=True, related_name='required_jobs', to='skills.skill')),
            ],
            options={
                'verbose_name': 'Job Offer',
                'verbose_name_plural': 'Job Offers',
                'ordering': ['-posted_at'],
            },
        ),
        migrations.CreateModel(
            name='UserJobPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_locations', models.JSONField(default=list, help_text='List of preferred cities/countries')),
                ('willing_to_relocate', models.BooleanField(default=True)),
                ('preferred_job_types', models.JSONField(default=list, help_text='Preferred job types')),
                ('preferred_seniority', models.CharField(blank=True, max_length=20)),
                ('target_salary_min', models.IntegerField(blank=True, null=True)),
                ('target_salary_max', models.IntegerField(blank=True, null=True)),
                ('remote_preference', models.CharField(choices=[('remote', 'Remote Only'), ('hybrid', 'Hybrid'), ('office', 'Office Only'), ('flexible', 'Flexible')], default='flexible', max_length=20)),
                ('preferred_industries', models.JSONField(default=list, help_text='Preferred industries')),
                ('preferred_company_sizes', models.JSONField(default=list, help_text='Preferred company sizes')),
                ('skill_priorities', models.JSONField(default=dict, help_text='Skill importance weights')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='job_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Job Preference',
                'verbose_name_plural': 'User Job Preferences',
            },
        ),
        migrations.CreateModel(
            name='ScoringWeights',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default Weights', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('skill_match_weight', models.FloatField(default=0.7, help_text='Weight for skill matching score')),
                ('content_similarity_weight', models.FloatField(default=0.2, help_text='Weight for content similarity score')),
                ('cluster_fit_weight', models.FloatField(default=0.1, help_text='Weight for cluster fit score')),
                ('required_skill_weight', models.FloatField(default=0.8, help_text='Weight for required skills within skill matching')),
                ('preferred_skill_weight', models.FloatField(default=0.2, help_text='Weight for preferred skills within skill matching')),
                ('location_bonus_weight', models.FloatField(default=0.05, help_text='Bonus for location match')),
                ('experience_bonus_weight', models.FloatField(default=0.03, help_text='Bonus for experience level match')),
                ('remote_bonus_weight', models.FloatField(default=0.02, help_text='Bonus for remote work')),
                ('salary_fit_weight', models.FloatField(default=0.0, help_text='Weight for salary fit (disabled by default)')),
                ('min_score_threshold', models.FloatField(default=15.0, help_text='Minimum score to include in recommendations')),
                ('max_recommendations', models.IntegerField(default=10, help_text='Maximum number of recommendations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Scoring Weights',
                'verbose_name_plural': 'Scoring Weights',
                'ordering': ['-is_active', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('total_recommendations', models.IntegerField(default=0)),
                ('avg_score', models.FloatField(default=0.0)),
                ('min_score', models.FloatField(default=0.0)),
                ('max_score', models.FloatField(default=0.0)),
                ('avg_skill_match', models.FloatField(default=0.0)),
                ('avg_required_skill_match', models.FloatField(default=0.0)),
                ('avg_preferred_skill_match', models.FloatField(default=0.0)),
                ('cluster_distribution', models.JSONField(default=dict, help_text='Distribution of jobs across clusters')),
                ('avg_cluster_fit', models.FloatField(default=0.0)),
                ('recommendations_viewed', models.IntegerField(default=0)),
                ('applications_from_recommendations', models.IntegerField(default=0)),
                ('jobs_saved_from_recommendations', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Recommendation Analytics',
                'verbose_name_plural': 'Recommendation Analytics',
                'ordering': ['-date'],
                'unique_together': {('date',)},
            },
        ),
        migrations.CreateModel(
            name='SavedJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.IntegerField(help_text='ID of the saved job')),
                ('job_title', models.CharField(blank=True, help_text='Title of the saved job', max_length=200)),
                ('job_company', models.CharField(blank=True, help_text='Company of the saved job', max_length=200)),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Saved Job',
                'verbose_name_plural': 'Saved Jobs',
                'ordering': ['-saved_at'],
                'unique_together': {('user', 'job_id')},
            },
        ),
        migrations.CreateModel(
            name='JobRecommendationDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.FloatField(help_text='Overall recommendation score (0-100)')),
                ('content_score', models.FloatField(help_text='Content similarity score (0-100)')),
                ('skill_score', models.FloatField(help_text='Skill matching score (0-100)')),
                ('cluster_fit_score', models.FloatField(help_text='Cluster fit score (0-100)')),
                ('required_skill_score', models.FloatField(help_text='Required skills match score (0-100)')),
                ('preferred_skill_score', models.FloatField(help_text='Preferred skills match score (0-100)')),
                ('required_skills_count', models.IntegerField(default=0)),
                ('preferred_skills_count', models.IntegerField(default=0)),
                ('required_matched_count', models.IntegerField(default=0)),
                ('preferred_matched_count', models.IntegerField(default=0)),
                ('location_bonus', models.FloatField(default=0.0, help_text='Location match bonus')),
                ('experience_bonus', models.FloatField(default=0.0, help_text='Experience level bonus')),
                ('remote_bonus', models.FloatField(default=0.0, help_text='Remote work bonus')),
                ('salary_fit', models.FloatField(default=0.0, help_text='Salary fit score')),
                ('matched_skills', models.JSONField(default=list, help_text='List of matched skills')),
                ('missing_skills', models.JSONField(default=list, help_text='List of missing skills')),
                ('required_matched_skills', models.JSONField(default=list, help_text='Required skills that matched')),
                ('preferred_matched_skills', models.JSONField(default=list, help_text='Preferred skills that matched')),
                ('required_missing_skills', models.JSONField(default=list, help_text="Required skills that didn't match")),
                ('preferred_missing_skills', models.JSONField(default=list, help_text="Preferred skills that didn't match")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('job_offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_details', to='recommendation.joboffer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_details', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Job Recommendation Detail',
                'verbose_name_plural': 'Job Recommendation Details',
                'ordering': ['-overall_score', '-created_at'],
                'unique_together': {('job_offer', 'user')},
            },
        ),
        migrations.CreateModel(
            name='JobRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0, help_text='Overall recommendation score')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('algorithm_version', models.CharField(default='enhanced_v1', max_length=50)),
                ('cluster_id', models.IntegerField(blank=True, help_text='K-Means cluster ID', null=True)),
                ('job_offer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='recommendation.joboffer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Job Recommendation',
                'verbose_name_plural': 'Job Recommendations',
                'ordering': ['-score', '-created_at'],
                'unique_together': {('user', 'job_offer')},
            },
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.IntegerField(help_text='ID of the job being applied to')),
                ('status', models.CharField(choices=[('applied', 'Applied'), ('under_review', 'Under Review'), ('shortlisted', 'Shortlisted'), ('interview_scheduled', 'Interview Scheduled'), ('interviewed', 'Interviewed'), ('rejected', 'Rejected'), ('accepted', 'Accepted'), ('withdrawn', 'Withdrawn')], default='applied', max_length=30)),
                ('cover_letter', models.TextField(blank=True, help_text='Cover letter for the application')),
                ('resume_url', models.URLField(blank=True, help_text='URL to the resume file')),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Job Application',
                'verbose_name_plural': 'Job Applications',
                'ordering': ['-applied_at'],
                'unique_together': {('user', 'job_id')},
            },
        ),
    ]
