#!/usr/bin/env python
import os
import django
import sys

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'careerquest.settings')
sys.path.append('.')
django.setup()

from django.contrib.auth.models import User
from skills.models import Skill, CandidateProfile, TechnicalTest, TestQuestion

def init_database():
    print("üöÄ Initialisation de la base de donn√©es Skills Assessment...")
    
    # Cr√©er superuser
    if not User.objects.filter(username='admin').exists():
        User.objects.create_superuser('admin', 'admin@test.com', 'admin123')
        print('‚úÖ Superuser cr√©√©: admin / admin123')
    else:
        print('‚ÑπÔ∏è Superuser admin existe d√©j√†')
    
    # Cr√©er les comp√©tences
    skills_data = [
        ('Python', 'programming', 'Langage de programmation polyvalent et puissant'),
        ('JavaScript', 'programming', 'Langage pour le web frontend et backend'),
        ('Java', 'programming', 'Langage orient√© objet robuste et populaire'),
        ('C#', 'programming', 'Langage Microsoft pour .NET'),
        ('PHP', 'programming', 'Langage web c√¥t√© serveur'),
        ('TypeScript', 'programming', 'JavaScript avec typage statique'),
        
        ('React', 'frontend', 'Biblioth√®que JavaScript pour interfaces utilisateur'),
        ('Vue.js', 'frontend', 'Framework JavaScript progressif'),
        ('Angular', 'frontend', 'Framework web TypeScript complet'),
        ('HTML', 'frontend', 'Langage de balisage pour le web'),
        ('CSS', 'frontend', 'Feuilles de style en cascade'),
        ('Sass/SCSS', 'frontend', 'Pr√©processeur CSS'),
        
        ('Node.js', 'backend', 'Runtime JavaScript c√¥t√© serveur'),
        ('Django', 'backend', 'Framework web Python'),
        ('Spring Boot', 'backend', 'Framework Java pour microservices'),
        ('Express.js', 'backend', 'Framework web Node.js minimaliste'),
        ('Laravel', 'backend', 'Framework PHP √©l√©gant'),
        
        ('MySQL', 'database', 'Syst√®me de gestion de base de donn√©es relationnelle'),
        ('PostgreSQL', 'database', 'Base de donn√©es relationnelle avanc√©e'),
        ('MongoDB', 'database', 'Base de donn√©es NoSQL orient√©e documents'),
        ('Redis', 'database', 'Store de structure de donn√©es en m√©moire'),
        ('SQLite', 'database', 'Base de donn√©es l√©g√®re et autonome'),
        
        ('Docker', 'devops', 'Plateforme de conteneurisation'),
        ('AWS', 'devops', 'Services cloud Amazon'),
        ('Git', 'devops', 'Syst√®me de contr√¥le de version distribu√©'),
        ('Jenkins', 'devops', 'Serveur d\'int√©gration continue'),
        ('Kubernetes', 'devops', 'Orchestrateur de conteneurs'),
        
        ('React Native', 'mobile', 'Framework pour apps mobiles cross-platform'),
        ('Flutter', 'mobile', 'SDK UI de Google pour apps natives'),
        ('Swift', 'mobile', 'Langage pour le d√©veloppement iOS'),
        ('Kotlin', 'mobile', 'Langage moderne pour Android'),
        
        ('Jest', 'testing', 'Framework de test JavaScript'),
        ('Pytest', 'testing', 'Framework de test Python'),
        ('Selenium', 'testing', 'Outil d\'automatisation de tests web'),
        ('JUnit', 'testing', 'Framework de test unitaire Java'),
    ]
    
    print(f'üìù Cr√©ation de {len(skills_data)} comp√©tences...')
    for name, category, description in skills_data:
        skill, created = Skill.objects.get_or_create(
            name=name,
            defaults={'category': category, 'description': description}
        )
        if created:
            print(f'‚úÖ Comp√©tence cr√©√©e: {name}')
    
    # Cr√©er des candidats d'exemple
    print('üë• Cr√©ation de candidats d\'exemple...')
    
    # Candidat 1 - D√©veloppeur Full Stack
    user1, created = User.objects.get_or_create(
        username='candidat1',
        defaults={
            'email': 'candidat1@test.com',
            'first_name': 'Jean',
            'last_name': 'Dupont'
        }
    )
    if created:
        user1.set_password('password123')
        user1.save()
        
        candidate1, created = CandidateProfile.objects.get_or_create(
            user=user1,
            defaults={
                'first_name': 'Jean',
                'last_name': 'Dupont',
                'email': 'jean.dupont@test.com',
                'phone': '01 23 45 67 89'
            }
        )
        if created:
            # Ajouter comp√©tences Full Stack
            skills_fullstack = ['JavaScript', 'React', 'Node.js', 'Python', 'Django', 'MySQL', 'Git']
            for skill_name in skills_fullstack:
                try:
                    skill = Skill.objects.get(name=skill_name)
                    candidate1.skills.add(skill)
                except Skill.DoesNotExist:
                    pass
            print('‚úÖ Candidat Jean Dupont (Full Stack) cr√©√©')
    
    # Candidat 2 - D√©veloppeur Backend
    user2, created = User.objects.get_or_create(
        username='candidat2',
        defaults={
            'email': 'candidat2@test.com',
            'first_name': 'Marie',
            'last_name': 'Martin'
        }
    )
    if created:
        user2.set_password('password123')
        user2.save()
        
        candidate2, created = CandidateProfile.objects.get_or_create(
            user=user2,
            defaults={
                'first_name': 'Marie',
                'last_name': 'Martin',
                'email': 'marie.martin@test.com',
                'phone': '01 34 56 78 90'
            }
        )
        if created:
            # Ajouter comp√©tences Backend
            skills_backend = ['Java', 'Spring Boot', 'PostgreSQL', 'Docker', 'AWS', 'Git']
            for skill_name in skills_backend:
                try:
                    skill = Skill.objects.get(name=skill_name)
                    candidate2.skills.add(skill)
                except Skill.DoesNotExist:
                    pass
            print('‚úÖ Candidat Marie Martin (Backend) cr√©√©')
    
    # Cr√©er des tests d'exemple
    print('üß™ Cr√©ation de tests d\'exemple...')
    
    # Test JavaScript
    try:
        js_skill = Skill.objects.get(name='JavaScript')
        js_test, created = TechnicalTest.objects.get_or_create(
            test_name='Test JavaScript Fondamentaux',
            skill=js_skill,
            defaults={
                'description': '√âvaluation des connaissances de base en JavaScript',
                'instructions': 'Ce test √©value vos connaissances fondamentales en JavaScript. Vous avez 30 minutes pour r√©pondre aux questions.',
                'total_score': 10,
                'time_limit': 30,
                'is_active': True
            }
        )
        
        if created:
            # Questions JavaScript
            questions = [
                {
                    'question': 'Qu\'est-ce que le hoisting en JavaScript ?',
                    'options': ['Une m√©thode pour optimiser le code', 'Le fait que les d√©clarations sont remont√©es en haut de leur scope', 'Une fa√ßon de cr√©er des objets', 'Un type de boucle'],
                    'correct_answer': 'b',
                    'points': 2
                },
                {
                    'question': 'Quelle est la diff√©rence entre == et === ?',
                    'options': ['Aucune diff√©rence', '== compare les valeurs, === compare les valeurs et les types', '== est plus rapide', '=== est obsol√®te'],
                    'correct_answer': 'b',
                    'points': 2
                },
                {
                    'question': 'Comment d√©clarer une variable en JavaScript ES6+ ?',
                    'options': ['var seulement', 'let et const', 'declare', 'variable'],
                    'correct_answer': 'b',
                    'points': 2
                },
                {
                    'question': 'Que fait Array.prototype.map() ?',
                    'options': ['Modifie le tableau original', 'Cr√©e un nouveau tableau transform√©', 'Filtre les √©l√©ments', 'Trie le tableau'],
                    'correct_answer': 'b',
                    'points': 2
                },
                {
                    'question': 'Qu\'est-ce qu\'une fonction fl√©ch√©e (arrow function) ?',
                    'options': ['Une fonction obsol√®te', 'Une syntaxe concise pour √©crire des fonctions', 'Une fonction qui va vite', 'Un type de boucle'],
                    'correct_answer': 'b',
                    'points': 2
                }
            ]
            
            for i, q_data in enumerate(questions, 1):
                TestQuestion.objects.create(
                    test=js_test,
                    order=i,
                    question_text=q_data['question'],
                    option_a=q_data['options'][0],
                    option_b=q_data['options'][1],
                    option_c=q_data['options'][2],
                    option_d=q_data['options'][3],
                    correct_answer=q_data['correct_answer'],
                    points=q_data['points']
                )
            print('‚úÖ Test JavaScript cr√©√© avec 5 questions')
    except Skill.DoesNotExist:
        print('‚ùå Comp√©tence JavaScript non trouv√©e')
    
    # Test Python
    try:
        python_skill = Skill.objects.get(name='Python')
        python_test, created = TechnicalTest.objects.get_or_create(
            test_name='Test Python Fondamentaux',
            skill=python_skill,
            defaults={
                'description': '√âvaluation des connaissances de base en Python',
                'instructions': 'Ce test √©value vos connaissances fondamentales en Python. Vous avez 25 minutes pour r√©pondre aux questions.',
                'total_score': 8,
                'time_limit': 25,
                'is_active': True
            }
        )
        
        if created:
            # Questions Python
            questions = [
                {
                    'question': 'Qu\'est-ce qu\'une list comprehension en Python ?',
                    'options': ['Une fonction built-in', 'Une fa√ßon concise de cr√©er des listes', 'Un type de donn√©es', 'Une librairie'],
                    'correct_answer': 'b',
                    'points': 2
                },
                {
                    'question': 'Comment g√©rer les exceptions en Python ?',
                    'options': ['try/catch', 'try/except', 'catch/finally', 'handle/error'],
                    'correct_answer': 'b',
                    'points': 2
                },
                {
                    'question': 'Qu\'est-ce qu\'un d√©corateur en Python ?',
                    'options': ['Une fonction qui modifie une autre fonction', 'Un pattern de design', 'Une librairie', 'Un type de classe'],
                    'correct_answer': 'a',
                    'points': 2
                },
                {
                    'question': 'Quelle est la diff√©rence entre une liste et un tuple ?',
                    'options': ['Aucune diff√©rence', 'Les tuples sont mutables', 'Les listes sont mutables, les tuples non', 'Les tuples sont plus lents'],
                    'correct_answer': 'c',
                    'points': 2
                }
            ]
            
            for i, q_data in enumerate(questions, 1):
                TestQuestion.objects.create(
                    test=python_test,
                    order=i,
                    question_text=q_data['question'],
                    option_a=q_data['options'][0],
                    option_b=q_data['options'][1],
                    option_c=q_data['options'][2],
                    option_d=q_data['options'][3],
                    correct_answer=q_data['correct_answer'],
                    points=q_data['points']
                )
            print('‚úÖ Test Python cr√©√© avec 4 questions')
    except Skill.DoesNotExist:
        print('‚ùå Comp√©tence Python non trouv√©e')
    
    print('\nüéØ Initialisation termin√©e !')
    print('=================================')
    print('üåê Admin Django: http://localhost:8000/admin')
    print('üë§ Login: admin / admin123')
    print('')
    print('üìä Candidats cr√©√©s:')
    print('  - Jean Dupont (candidat1 / password123)')
    print('  - Marie Martin (candidat2 / password123)')
    print('')
    print('üß™ Tests cr√©√©s:')
    print('  - Test JavaScript Fondamentaux (10 points)')
    print('  - Test Python Fondamentaux (8 points)')
    print('')
    print('üí° Pour cr√©er vos propres tests:')
    print('  1. Allez sur l\'admin Django')
    print('  2. Section "Tests Techniques"')
    print('  3. Cliquez "Ajouter"')
    print('  4. Collez votre JSON dans le champ pr√©vu')
    print('=================================')

if __name__ == '__main__':
    init_database()
