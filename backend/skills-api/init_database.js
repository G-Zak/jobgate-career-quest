// Script pour initialiser la base de donn√©es
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'skills.db');
console.log('üìÅ Chemin de la base de donn√©es:', dbPath);

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå Erreur ouverture BDD:', err.message);
        process.exit(1);
    } else {
        console.log('‚úÖ Connexion √† SQLite r√©ussie');
        initializeTables();
    }
});

function initializeTables() {
    console.log('üîß Cr√©ation des tables...');

    // 1. Table skills (comp√©tences)
    db.run(`
        CREATE TABLE IF NOT EXISTS skills (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(100) NOT NULL UNIQUE,
            category VARCHAR(50) NOT NULL,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    `, (err) => {
        if (err) console.error('‚ùå Erreur table skills:', err);
        else console.log('‚úÖ Table skills cr√©√©e');
    });

    // 2. Table candidats (users)
    db.run(`
        CREATE TABLE IF NOT EXISTS candidats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nom VARCHAR(100) NOT NULL,
            prenom VARCHAR(100) NOT NULL,
            email VARCHAR(200) UNIQUE NOT NULL,
            telephone VARCHAR(20),
            cv_path TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    `, (err) => {
        if (err) console.error('‚ùå Erreur table candidats:', err);
        else console.log('‚úÖ Table candidats cr√©√©e');
    });

    // 3. Table user_skills (comp√©tences des utilisateurs)
    db.run(`
        CREATE TABLE IF NOT EXISTS user_skills (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id VARCHAR(100) NOT NULL,
            skill_id INTEGER NOT NULL,
            proficiency_level VARCHAR(20) DEFAULT 'beginner',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (skill_id) REFERENCES skills (id),
            UNIQUE(user_id, skill_id)
        )
    `, (err) => {
        if (err) console.error('‚ùå Erreur table user_skills:', err);
        else console.log('‚úÖ Table user_skills cr√©√©e');
    });

    // 4. Table custom_tests (vos tests personnalis√©s)
    db.run(`
        CREATE TABLE IF NOT EXISTS custom_tests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            skill_id INTEGER NOT NULL,
            test_name VARCHAR(200) NOT NULL,
            description TEXT,
            total_score INTEGER NOT NULL DEFAULT 10,
            time_limit INTEGER DEFAULT 30,
            instructions TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (skill_id) REFERENCES skills (id)
        )
    `, (err) => {
        if (err) console.error('‚ùå Erreur table custom_tests:', err);
        else console.log('‚úÖ Table custom_tests cr√©√©e');
    });

    // 5. Table test_questions (questions de vos tests)
    db.run(`
        CREATE TABLE IF NOT EXISTS test_questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            test_id INTEGER NOT NULL,
            question_text TEXT NOT NULL,
            question_type VARCHAR(20) DEFAULT 'multiple_choice',
            option_a TEXT,
            option_b TEXT,
            option_c TEXT,
            option_d TEXT,
            correct_answer TEXT NOT NULL,
            points INTEGER DEFAULT 1,
            explanation TEXT,
            question_order INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (test_id) REFERENCES custom_tests (id)
        )
    `, (err) => {
        if (err) console.error('‚ùå Erreur table test_questions:', err);
        else console.log('‚úÖ Table test_questions cr√©√©e');
    });

    // 6. Table user_test_results (r√©sultats des tests)
    db.run(`
        CREATE TABLE IF NOT EXISTS user_test_results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id VARCHAR(100) NOT NULL,
            test_id INTEGER NOT NULL,
            score INTEGER NOT NULL,
            total_score INTEGER NOT NULL,
            percentage DECIMAL(5,2),
            time_taken INTEGER,
            completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            answers_data TEXT,
            FOREIGN KEY (test_id) REFERENCES custom_tests (id)
        )
    `, (err) => {
        if (err) console.error('‚ùå Erreur table user_test_results:', err);
        else console.log('‚úÖ Table user_test_results cr√©√©e');
        
        // Apr√®s cr√©ation de toutes les tables, ins√©rer les donn√©es de base
        seedInitialData();
    });
}

function seedInitialData() {
    console.log('üå± Insertion des donn√©es de base...');
    
    // V√©rifier si des comp√©tences existent d√©j√†
    db.get("SELECT COUNT(*) as count FROM skills", (err, row) => {
        if (err) {
            console.error('‚ùå Erreur v√©rification skills:', err);
            return;
        }

        if (row.count === 0) {
            console.log('üìù Insertion des comp√©tences de base...');
            
            const skills = [
                ['Python', 'Programming Language', 'Langage de programmation de haut niveau'],
                ['Java', 'Programming Language', 'Langage de programmation orient√© objet'],
                ['JavaScript', 'Programming Language', 'Langage de script pour le d√©veloppement web'],
                ['React', 'Frontend Framework', 'Biblioth√®que JavaScript pour interfaces utilisateur'],
                ['Node.js', 'Backend Technology', 'Runtime JavaScript c√¥t√© serveur'],
                ['SQL', 'Database', 'Langage de requ√™te pour bases de donn√©es'],
                ['HTML', 'Web Technology', 'Langage de balisage pour pages web'],
                ['CSS', 'Web Technology', 'Langage de style pour le web'],
                ['Git', 'Version Control', 'Syst√®me de contr√¥le de version distribu√©'],
                ['Docker', 'DevOps', 'Plateforme de conteneurisation'],
                ['Spring Boot', 'Backend Framework', 'Framework Java pour applications'],
                ['Angular', 'Frontend Framework', 'Framework TypeScript pour applications web'],
                ['Vue.js', 'Frontend Framework', 'Framework JavaScript progressif'],
                ['MongoDB', 'Database', 'Base de donn√©es NoSQL orient√©e documents'],
                ['PostgreSQL', 'Database', 'Syst√®me de gestion de base de donn√©es relationnelle'],
                ['AWS', 'Cloud', 'Services cloud Amazon'],
                ['Linux', 'Operating System', 'Syst√®me d\'exploitation open source'],
                ['Kubernetes', 'DevOps', 'Orchestration de conteneurs'],
                ['TypeScript', 'Programming Language', 'Superset typ√© de JavaScript'],
                ['PHP', 'Programming Language', 'Langage de script c√¥t√© serveur']
            ];

            const stmt = db.prepare("INSERT INTO skills (name, category, description) VALUES (?, ?, ?)");
            
            skills.forEach((skill, index) => {
                stmt.run(skill, (err) => {
                    if (err) {
                        console.error(`‚ùå Erreur insertion skill ${skill[0]}:`, err);
                    } else {
                        console.log(`‚úÖ Comp√©tence ajout√©e: ${skill[0]}`);
                    }
                    
                    // Quand toutes les comp√©tences sont ins√©r√©es
                    if (index === skills.length - 1) {
                        stmt.finalize();
                        console.log('üéâ Base de donn√©es initialis√©e avec succ√®s !');
                        console.log('\nüìä R√©sum√©:');
                        console.log(`   - ${skills.length} comp√©tences ajout√©es`);
                        console.log('   - 6 tables cr√©√©es');
                        console.log('\nüí° Vous pouvez maintenant:');
                        console.log('   1. Importer vos tests JSON');
                        console.log('   2. D√©marrer le serveur backend');
                        console.log('   3. Utiliser l\'interface d\'administration');
                        
                        db.close((err) => {
                            if (err) {
                                console.error('‚ùå Erreur fermeture BDD:', err);
                            } else {
                                console.log('‚úÖ Connexion ferm√©e');
                            }
                        });
                    }
                });
            });
        } else {
            console.log('‚ÑπÔ∏è Comp√©tences d√©j√† pr√©sentes dans la base');
            db.close();
        }
    });
}

// Fonction pour afficher le contenu de la base
function showTables() {
    console.log('\nüìã TABLES CR√â√âES:');
    
    const tables = ['skills', 'candidats', 'user_skills', 'custom_tests', 'test_questions', 'user_test_results'];
    
    tables.forEach(tableName => {
        db.get(`SELECT COUNT(*) as count FROM ${tableName}`, (err, row) => {
            if (err) {
                console.log(`   ‚ùå ${tableName}: Erreur`);
            } else {
                console.log(`   ‚úÖ ${tableName}: ${row.count} enregistrements`);
            }
        });
    });
}
